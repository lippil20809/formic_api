{"ast":null,"code":"var _jsxFileName = \"/Users/filippkovalenko/Desktop/\\u0443\\u0447\\u0435\\u0431\\u0430 /react-1/react-redux-classwork/src/components/Form/Form.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { DialogActions, DialogContent, DialogTitle, Button, TextField, Stack } from \"@mui/material\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { createPost } from '../../store/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    initial\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset\n  } = useFormik({\n    initialValues: {\n      title: \"\",\n      body: \"\"\n    },\n    validationSchema: yup.object().shape({\n      title: yup.string().required(\"Required\"),\n      body: yup.string().required(\"Required\")\n    }),\n    onSubmit: data => {\n      dispatch(createPost({ ...data,\n        id: Math.random(),\n        userId: 1\n      }));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    onReset: handleReset,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Create product\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"column\",\n        spacing: 2,\n        mt: 2,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Title\",\n          id: \"title\",\n          name: \"title\",\n          value: values.title,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: touched.title && !!errors.title,\n          helperText: touched.title && errors.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Brand\",\n          id: \"body\",\n          name: \"body\",\n          value: values.body,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: touched.body && !!errors.body,\n          helperText: touched.body && errors.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        onClick: () => handleSubmit(),\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"x1SlhBQUJKnx9iKIpqnBzfVtbo0=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/filippkovalenko/Desktop/учеба /react-1/react-redux-classwork/src/components/Form/Form.tsx"],"names":["React","useDispatch","DialogActions","DialogContent","DialogTitle","Button","TextField","Stack","yup","useFormik","createPost","Form","initial","dispatch","values","touched","errors","handleChange","handleBlur","handleSubmit","handleReset","initialValues","title","body","validationSchema","object","shape","string","required","onSubmit","data","id","Math","random","userId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Button,\n  TextField,\n  Stack,\n} from \"@mui/material\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport {createPost} from '../../store/posts'\nimport { FormProps, FormValues } from \"./Form.types\";\nimport { Post } from \"api/posts.types\";\n\nconst Form: React.FC<FormProps> = ({ initial }) => {\n  const dispatch = useDispatch();\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n  } = useFormik<FormValues>({\n    initialValues: {\n\n      title: \"\",\n      body: \"\",\n    },\n    validationSchema: yup.object().shape({\n      title: yup.string().required(\"Required\"),\n      body: yup.string().required(\"Required\"),\n    }),\n    onSubmit: (data) => {\n      dispatch(createPost({...data, id: Math.random(), userId: 1}))\n    },\n  });\n\n\n  return (\n    <form onSubmit={handleSubmit} onReset={handleReset}>\n      <DialogTitle>Create product</DialogTitle>\n      <DialogContent>\n        <Stack direction=\"column\" spacing={2} mt={2}>\n          <TextField\n            label=\"Title\"\n            id=\"title\"\n            name=\"title\"\n            value={values.title}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            error={touched.title && !!errors.title}\n            helperText={touched.title && errors.title}\n          />\n          <TextField\n            label=\"Brand\"\n            id='body'\n            name=\"body\"\n            value={values.body}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            error={touched.body && !!errors.body}\n            helperText={touched.body && errors.body}\n          />\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button  type=\"button\" onClick={() => handleSubmit()}>\n          Create\n        </Button>\n      \n      </DialogActions>\n    </form>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}
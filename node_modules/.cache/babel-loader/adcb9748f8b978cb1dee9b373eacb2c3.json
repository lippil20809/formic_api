{"ast":null,"code":"var _jsxFileName = \"/Users/filippkovalenko/Desktop/\\u0443\\u0447\\u0435\\u0431\\u0430 /react-1/react-jsx-classwork/src/components/Counter/Counter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(\"div\")`\n  margin: 40px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.1);\n  border: 1px solid gray;\n  border-radius: 8px;\n  overflow: hidden;\n  max-width: 250px;\n\n  > p {\n    width: 100%;\n    margin: 0px;\n    text-align: center;\n    font-size: 24px;\n    font-weight: 500;\n    padding: 12px 0px;\n  }\n`;\n_c = Wrapper;\nconst ButtonsGroup = styled(\"div\")`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n_c2 = ButtonsGroup;\n\nconst Counter = _ref => {\n  _s();\n\n  let {\n    initial = 0\n  } = _ref;\n  const [count, setCount] = useState(initial);\n\n  const handleAdd = () => setCount(count + 1);\n\n  const handleMinus = () => setCount(count - 1);\n\n  const handleReset = () => setCount(initial);\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonsGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"yellow\",\n        onClick: handleMinus,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        onClick: handleReset,\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"red\",\n        onClick: handleAdd,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Counter, \"fas42Yw+PoMJp/kPAuVho9IBnmY=\");\n\n_c3 = Counter;\n\nfunction generateRandomNumbers() {\n  const numbers = [];\n\n  while (numbers.length < 20000) {\n    const number = Math.floor(Math.random() * 1000000);\n\n    if (!numbers.includes(number)) {\n      numbers.push(number);\n    }\n  }\n\n  return numbers;\n}\n\nexport default Counter;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"ButtonsGroup\");\n$RefreshReg$(_c3, \"Counter\");","map":{"version":3,"sources":["/Users/filippkovalenko/Desktop/учеба /react-1/react-jsx-classwork/src/components/Counter/Counter.js"],"names":["React","useState","styled","Button","Wrapper","ButtonsGroup","Counter","initial","count","setCount","handleAdd","handleMinus","handleReset","generateRandomNumbers","numbers","length","number","Math","floor","random","includes","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,OAAO,GAAGF,MAAM,CAAC,KAAD,CAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;KAAME,O;AAqBN,MAAMC,YAAY,GAAGH,MAAM,CAAC,KAAD,CAAQ;AACnC;AACA;AACA;AACA;AACA,CALA;MAAMG,Y;;AAON,MAAMC,OAAO,GAAG,QAAqB;AAAA;;AAAA,MAApB;AAAEC,IAAAA,OAAO,GAAG;AAAZ,GAAoB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,OAAD,CAAlC;;AAEA,QAAMG,SAAS,GAAG,MAAMD,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAhC;;AACA,QAAMG,WAAW,GAAG,MAAMF,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAlC;;AACA,QAAMI,WAAW,GAAG,MAAMH,QAAQ,CAACF,OAAD,CAAlC;;AAEA,sBACE,QAAC,OAAD;AAAA,4BACE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,OAAO,EAAEG,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,OAAO,EAAEC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAoB,QAAA,OAAO,EAAEF,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAvBD;;GAAMJ,O;;MAAAA,O;;AAyBN,SAASO,qBAAT,GAAiC;AAC/B,QAAMC,OAAO,GAAG,EAAhB;;AAEA,SAAOA,OAAO,CAACC,MAAR,GAAiB,KAAxB,EAA+B;AAC7B,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAf;;AACA,QAAI,CAACL,OAAO,CAACM,QAAR,CAAiBJ,MAAjB,CAAL,EAA+B;AAC7BF,MAAAA,OAAO,CAACO,IAAR,CAAaL,MAAb;AACD;AACF;;AAED,SAAOF,OAAP;AACD;;AAED,eAAeR,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Button from \"../Button\";\n\nconst Wrapper = styled(\"div\")`\n  margin: 40px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.1);\n  border: 1px solid gray;\n  border-radius: 8px;\n  overflow: hidden;\n  max-width: 250px;\n\n  > p {\n    width: 100%;\n    margin: 0px;\n    text-align: center;\n    font-size: 24px;\n    font-weight: 500;\n    padding: 12px 0px;\n  }\n`;\n\nconst ButtonsGroup = styled(\"div\")`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst Counter = ({ initial = 0 }) => {\n  const [count, setCount] = useState(initial);\n\n  const handleAdd = () => setCount(count + 1);\n  const handleMinus = () => setCount(count - 1);\n  const handleReset = () => setCount(initial);\n\n  return (\n    <Wrapper>\n      <p>{count}</p>\n      <ButtonsGroup>\n        <Button color=\"yellow\" onClick={handleMinus}>\n          -\n        </Button>\n        <Button color=\"green\" onClick={handleReset}>\n          reset\n        </Button>\n        <Button color=\"red\" onClick={handleAdd}>\n          +\n        </Button>\n      </ButtonsGroup>\n    </Wrapper>\n  );\n};\n\nfunction generateRandomNumbers() {\n  const numbers = [];\n\n  while (numbers.length < 20000) {\n    const number = Math.floor(Math.random() * 1000000);\n    if (!numbers.includes(number)) {\n      numbers.push(number);\n    }\n  }\n\n  return numbers;\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}
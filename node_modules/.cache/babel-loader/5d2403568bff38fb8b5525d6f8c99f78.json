{"ast":null,"code":"import { CREAT_TODO, CREAT_DONE } from \"./todo.actions\";\nexport const initialStates = {\n  todoList: [],\n  deletedTodoList: []\n};\nexport const todoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStates;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CREAT_TODO:\n      return { ...state,\n        todoList: state.todoList.concat({\n          id: Math.random(),\n          title: action.payload,\n          completed: false\n        })\n      };\n\n    case CREAT_DONE:\n      return { ...state,\n        todoList: state.todoList.map(todo => todo.id !== id)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/filippkovalenko/Desktop/учеба /react-1/react-redux/src/store/todo/todo.reducer.js"],"names":["CREAT_TODO","CREAT_DONE","initialStates","todoList","deletedTodoList","todoReducer","state","action","type","concat","id","Math","random","title","payload","completed","map","todo"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AAEA,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,EADiB;AAE3BC,EAAAA,eAAe,EAAE;AAFU,CAAtB;AAKP,OAAO,MAAMC,WAAW,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BJ,aAA0B;AAAA,MAAXK,MAAW;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,UAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeM,MAAf,CAAsB;AAC9BC,UAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EAD0B;AAE9BC,UAAAA,KAAK,EAAEN,MAAM,CAACO,OAFgB;AAG9BC,UAAAA,SAAS,EAAE;AAHmB,SAAtB;AAFL,OAAP;;AAQA,SAAKd,UAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELH,QAAAA,QAAQ,EAACG,KAAK,CAACH,QAAN,CAAea,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAACP,EAAL,KAAYA,EAAzC;AAFJ,OAAP;;AAIJ;AACE,aAAOJ,KAAP;AAhBJ;AAkBD,CAnBM","sourcesContent":["import { CREAT_TODO, CREAT_DONE } from \"./todo.actions\";\n\nexport const initialStates = {\n  todoList: [],\n  deletedTodoList: [],\n};\n\nexport const todoReducer = (state = initialStates, action) => {\n  switch (action.type) {\n    case CREAT_TODO:\n      return {\n        ...state,\n        todoList: state.todoList.concat({\n          id: Math.random(),\n          title: action.payload,\n          completed: false,\n        }),\n      };\n      case CREAT_DONE:\n        return {\n          ...state,\n          todoList:state.todoList.map((todo) => todo.id !== id ) \n        }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as postTypes from \"./posts.types\";\nimport { Statuses } from \"../types\";\nexport const initialState = {\n  postsRequestStatus: Statuses.UNCALLED,\n  posts: []\n};\nexport const postsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case postTypes.SET_POSTS_REQUEST_STATUS_PENDING:\n      return { ...state,\n        postsRequestStatus: Statuses.PENDING\n      };\n\n    case postTypes.SET_POSTS:\n      return { ...state,\n        posts: action.payload,\n        postsRequestStatus: Statuses.SUCCESS\n      };\n\n    case postTypes.SET_POSTS_REQUEST_STATUS_FAILURE:\n      return { ...state,\n        postsRequestStatus: Statuses.FAILURE\n      };\n\n    case postTypes.CREATE_POST_REQUEST_STATUS_PENDING:\n      return { ...state,\n        postsRequestStatus: Statuses.PENDING\n      };\n\n    case postTypes.CREATE_POST:\n      return { ...state,\n        posts: state.posts.concat(action.payload),\n        postsRequestStatus: Statuses.SUCCESS\n      };\n\n    case postTypes.CREATE_POST_REQUEST_STATUS_FAILURE:\n      return { ...state,\n        postsRequestStatus: Statuses.FAILURE\n      };\n\n    case postTypes.DELETE_POST_REQUEST_STATUS_PENDING:\n      return { ...state,\n        postsRequestStatus: Statuses.PENDING\n      };\n\n    case postTypes.DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post.id !== action.payload),\n        postsRequestStatus: Statuses.SUCCESS\n      };\n\n    case postTypes.DELETE_POST_REQUEST_STATUS_FAILURE:\n      return { ...state,\n        postsRequestStatus: Statuses.FAILURE\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/filippkovalenko/Desktop/учеба /react-1/react-redux-classwork/src/store/posts/posts.reducer.ts"],"names":["postTypes","Statuses","initialState","postsRequestStatus","UNCALLED","posts","postsReducer","state","action","type","SET_POSTS_REQUEST_STATUS_PENDING","PENDING","SET_POSTS","payload","SUCCESS","SET_POSTS_REQUEST_STATUS_FAILURE","FAILURE","CREATE_POST_REQUEST_STATUS_PENDING","CREATE_POST","concat","CREATE_POST_REQUEST_STATUS_FAILURE","DELETE_POST_REQUEST_STATUS_PENDING","DELETE_POST","filter","post","id","DELETE_POST_REQUEST_STATUS_FAILURE"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,eAA3B;AAEA,SAASC,QAAT,QAAyB,UAAzB;AAGA,OAAO,MAAMC,YAA6B,GAAG;AAC3CC,EAAAA,kBAAkB,EAAEF,QAAQ,CAACG,QADc;AAG3CC,EAAAA,KAAK,EAAE;AAHoC,CAAtC;AAOP,OAAO,MAAMC,YAAY,GAAG,YAGN;AAAA,MAFpBC,KAEoB,uEAFKL,YAEL;AAAA,MADpBM,MACoB;;AACpB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,SAAS,CAACU,gCAAf;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYJ,QAAAA,kBAAkB,EAAEF,QAAQ,CAACU;AAAzC,OAAP;;AACF,SAAKX,SAAS,CAACY,SAAf;AACE,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACK,OAFT;AAGLV,QAAAA,kBAAkB,EAAEF,QAAQ,CAACa;AAHxB,OAAP;;AAKF,SAAKd,SAAS,CAACe,gCAAf;AACE,aAAO,EAAE,GAAGR,KAAL;AAAYJ,QAAAA,kBAAkB,EAAEF,QAAQ,CAACe;AAAzC,OAAP;;AAEF,SAAKhB,SAAS,CAACiB,kCAAf;AACE,aAAO,EAAE,GAAGV,KAAL;AAAYJ,QAAAA,kBAAkB,EAAEF,QAAQ,CAACU;AAAzC,OAAP;;AACF,SAAKX,SAAS,CAACkB,WAAf;AACE,aAAO,EACL,GAAGX,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYc,MAAZ,CAAmBX,MAAM,CAACK,OAA1B,CAFF;AAGLV,QAAAA,kBAAkB,EAAEF,QAAQ,CAACa;AAHxB,OAAP;;AAKF,SAAKd,SAAS,CAACoB,kCAAf;AACE,aAAO,EAAE,GAAGb,KAAL;AAAYJ,QAAAA,kBAAkB,EAAEF,QAAQ,CAACe;AAAzC,OAAP;;AAEA,SAAKhB,SAAS,CAACqB,kCAAf;AACE,aAAO,EAAE,GAAGd,KAAL;AAAYJ,QAAAA,kBAAkB,EAAEF,QAAQ,CAACU;AAAzC,OAAP;;AACF,SAAKX,SAAS,CAACsB,WAAf;AACE,aAAO,EACL,GAAGf,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYkB,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYjB,MAAM,CAACK,OAA9C,CAFF;AAGLV,QAAAA,kBAAkB,EAAEF,QAAQ,CAACa;AAHxB,OAAP;;AAKF,SAAKd,SAAS,CAAC0B,kCAAf;AACE,aAAO,EAAE,GAAGnB,KAAL;AAAYJ,QAAAA,kBAAkB,EAAEF,QAAQ,CAACe;AAAzC,OAAP;;AAGJ;AACE,aAAOT,KAAP;AApCJ;AAsCD,CA1CM","sourcesContent":["import * as postTypes from \"./posts.types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Statuses } from \"../types\";\nimport { Post } from \"api/posts.types\";\n\nexport const initialState: postTypes.State = {\n  postsRequestStatus: Statuses.UNCALLED,\n  \n  posts: [],\n\n};\n\nexport const postsReducer = (\n  state: postTypes.State = initialState,\n  action: postTypes.Actions\n): postTypes.State => {\n  switch (action.type) {\n    case postTypes.SET_POSTS_REQUEST_STATUS_PENDING:\n      return { ...state, postsRequestStatus: Statuses.PENDING };\n    case postTypes.SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n        postsRequestStatus: Statuses.SUCCESS,\n      };\n    case postTypes.SET_POSTS_REQUEST_STATUS_FAILURE:\n      return { ...state, postsRequestStatus: Statuses.FAILURE };\n\n    case postTypes.CREATE_POST_REQUEST_STATUS_PENDING:\n      return { ...state, postsRequestStatus: Statuses.PENDING };\n    case postTypes.CREATE_POST:\n      return {\n        ...state,\n        posts: state.posts.concat(action.payload),\n        postsRequestStatus: Statuses.SUCCESS,\n      };\n    case postTypes.CREATE_POST_REQUEST_STATUS_FAILURE:\n      return { ...state, postsRequestStatus: Statuses.FAILURE };\n\n      case postTypes.DELETE_POST_REQUEST_STATUS_PENDING:\n        return { ...state, postsRequestStatus: Statuses.PENDING };\n      case postTypes.DELETE_POST:\n        return {\n          ...state,\n          posts: state.posts.filter(post => post.id !== action.payload),\n          postsRequestStatus: Statuses.SUCCESS,\n        };\n      case postTypes.DELETE_POST_REQUEST_STATUS_FAILURE:\n        return { ...state, postsRequestStatus: Statuses.FAILURE };\n\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}